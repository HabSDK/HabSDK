#!/usr/bin/env node

const WS_HOST = '127.0.0.1';
const WS_PORT = 3000;

const fs = require('fs');
const WebSocket = require('uws');
const Analyser = require('./analyser.js');
//const AnalyserTests = require('./analyser-tests.js');

var WebSocketServer = WebSocket.Server;
var wss = new WebSocketServer({ port: WS_PORT });

var leaderboard = load_leaderboard();
function load_leaderboard() {
  return JSON.parse(fs.readFileSync('leaders.json'));
}

var add_leaderboard = function(analysis) {
  var promise = new Promise((pass, fail) => {
    leaderboard.push({"user":analysis.user, "score":analysis.result.overall_result, "timestamp":analysis.timestamp});
    fs.writeFile('leaders.json', JSON.stringify(leaderboard), 'utf8', pass.bind(null,analysis));
  });
  return promise;
}

var save_map = function(data_obj) {
  var promise = new Promise((pass, fail) => {
    var user = sanitize(data_obj.user);
    var timestamp = sanitize(data_obj.timestamp);
    filename = 'user_maps/'+user+'_'+timestamp+'.json';
    fs.writeFile(filename, JSON.stringify(data_obj.map_data), 'utf8', pass);
  });
  return promise;
}

var load_map = function(description_obj) {
  var promise = new Promise((pass, fail) => {
    var user = sanitize(description_obj.user);
    var timestamp = sanitize(description_obj.timestamp);
    filename = 'user_maps/'+user+'_'+timestamp+'.json';
    var data;
    try {
      data = JSON.parse(fs.readFileSync(filename));
    }
    catch(err) {
      fail(err);
    }
    pass(data);
  });
  return promise;
}

function analyse_map(data_obj) {
  var promise = new Promise((pass, fail) => {
    var analysis = {};
    analysis.user = data_obj.user;
    analysis.timestamp = data_obj.timestamp;
    analysis.map_data = data_obj.map_data;

    // DEBUG
    //analysis.map_data = AnalyserTests.create_test_layout();
    try {
      var result = Analyser.analyse_object(analysis.map_data)
    }
    catch(err) {
      fail('Map Analyser failed: '+err);
    }
    analysis.result = result;

    pass(analysis);
  });
  return promise;
}

function ws_push(ws, uri, data) {
  ws.send(JSON.stringify({'uri':uri,'data':data}));
}

wss.on('connection', (ws) => {
  ws.on('message', (data) => {
    var message;
    try {
      message = JSON.parse(data);
    }
    catch(err) {
      console.log("Error parsing websocket JSON input");
    }
    switch(message.uri) {
      case 'get:leaderboard':
        ws_push(ws, 'leaderboard', leaderboard);
        break;

      case 'get:user_map':
        load_map(message.data)
        .then((map_data) => {
          ws_push(ws, 'user_map', map_data);
        })
        .catch((err) => {
          console.log("Error loading user map: "+err);
        });
        break;

      case 'post:user_map':
        save_map(message.data)
        .catch((err) => {
          console.log("Error saving user map: "+err);
        })
        .then(() => analyse_map(message.data))
        .catch((err) => {
          console.log("Error scoring user map: "+err);
        })
        .then((analysis) => add_leaderboard(analysis))
        .catch((err) => {
          console.log("Error adding score to leaderboard: "+err);
        })
        .then((analysis) => {
          ws_push(ws, 'map_result', {'result':analysis.result,'timestamp':analysis.timestamp});
        });
        break;

      case 'get:admin':
        var user_count = 0;
        wss.clients.forEach(function each(client) {
          if (client !== wss && client.readyState === WebSocket.OPEN) {
            user_count++;
          }
        });
        ws_push(ws,'admin', {'user_count': user_count});
        break;

      default:
        console.log('Unknown websocket URI requested: '+message.uri);
        break;
    }
  });
});


process.on('SIGHUP', () => {
  console.log('Received SIGHUP.');

  console.log('Reloading leaderboard..');
  leaderboard = load_leaderboard();
});

var illegalRe = /[\/\?<>\\:\*\|":]/g;
var controlRe = /[\x00-\x1f\x80-\x9f]/g;
var reservedRe = /^\.+$/;
function sanitize(input) {
  var replacement = '';
  var sanitized = input
    .replace(illegalRe, replacement)
    .replace(controlRe, replacement)
    .replace(reservedRe, replacement)
  return sanitized;
}

console.log("HabSDK Server running"); 
